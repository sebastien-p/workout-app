import { Component, ViewChild, AfterContentInit } from '@angular/core';
import { Content, NavParams, ViewController } from 'ionic-angular';

import { DisplayWorkout } from '../../models/workout.model';
import { DisplaySet } from '../../models/set.model';
import { WorkoutsService } from '../../services/workouts.service';
import { ItemModalPage } from '../item-modal.page';

@Component({
  selector: 'page-exploit-workout',
  templateUrl: 'exploit-workout.page.html'
})
export class ExploitWorkoutPage
extends ItemModalPage<DisplayWorkout, WorkoutsService>
implements AfterContentInit { // TODO: handle no sets + handle auto + countdown (end + stop)
  previous: DisplaySet;
  current: DisplaySet;
  next: DisplaySet;
  serieNumber: number;

  @ViewChild(Content)
  private readonly content: Content;

  constructor(
    navParams: NavParams,
    viewController: ViewController,
    workoutsService: WorkoutsService
  ) {
    super(
      navParams,
      viewController,
      workoutsService
    );
  }

  get isFirstSet(): boolean {
    return !this.previous;
  }

  get isLastSet(): boolean {
    return !this.next;
  }

  get isFirstSerie(): boolean {
    return this.serieNumber === 1;
  }

  get isLastSerie(): boolean {
    return this.serieNumber === this.current.series
  }

  get isStart(): boolean {
    return this.isFirstSet && this.isFirstSerie;
  }

  get isEnd(): boolean {
    return this.isLastSet && this.isLastSerie;
  }

  get sets(): DisplaySet[] {
    return this.item.sets;
  }

  get setNumber(): number {
    return this.getSetIndex() + 1;
  }

  get pauseable(): DisplayWorkout | DisplaySet {
    return this.isLastSerie ? this.item : this.current;
  }

  ngAfterContentInit(): void {
    this.reset();
  }

  showPrevious(): void {
    if (this.isStart) { return; }
    if (this.isFirstSerie) { this.initializePrevious(); }
    else { this.serieNumber -= 1; }
  }

  showNext(): void {
    if (this.isEnd) { return; }
    if (this.isLastSerie) { this.initializeNext(); }
    else { this.serieNumber += 1; }
  }

  private getSetIndex(set: DisplaySet = this.current): number {
    return this.sets.indexOf(set);
  }

  private getSetFrom(
    from: DisplaySet = this.current,
    offset: number = 0
  ): DisplaySet {
    return this.sets[this.getSetIndex(from) + offset] || null;
  }

  private initialize(
    serieNumber: number,
    previous: DisplaySet = null,
    current: DisplaySet = null,
    next: DisplaySet = null
  ): void {
    this.previous = previous;
    this.current = current;
    this.next = next;
    this.serieNumber = serieNumber;
    this.content.resize();
  }

  private initializeFirstSerie(
    previous: DisplaySet,
    current: DisplaySet,
    next: DisplaySet
  ): void {
    return this.initialize(1, previous, current, next);
  }

  private initializeLastSerie(
    previous: DisplaySet,
    current: DisplaySet,
    next: DisplaySet
  ): void {
    return this.initialize(current.series, previous, current, next);
  }

  private reset(): void {
    this.initializeFirstSerie(null, this.sets[0], this.sets[1]);
  }

  private initializePrevious(): void {
    const previous: DisplaySet = this.getSetFrom(this.previous, -1);
    return this.initializeLastSerie(previous, this.previous, this.current);
  }

  private initializeNext(): void {
    const next: DisplaySet = this.getSetFrom(this.next, 1);
    return this.initializeFirstSerie(this.current, this.next, next);
  }
}
