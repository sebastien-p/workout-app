import { Component, ViewChild } from '@angular/core';
import { Content, NavParams, ViewController } from 'ionic-angular';

import { DisplayWorkout } from '../../models/workout.model';
import { DisplaySet } from '../../models/set.model';
import { WorkoutsService } from '../../services/workouts.service';
import { ItemModalPage } from '../item-modal.page';

type Initializer = (
  previous: DisplaySet,
  current: DisplaySet,
  next: DisplaySet,
  shift: number
) => void;

@Component({
  selector: 'page-exploit-workout',
  templateUrl: 'exploit-workout.page.html'
})
export class ExploitWorkoutPage
extends ItemModalPage<DisplayWorkout, WorkoutsService> {
  previous: DisplaySet;
  current: DisplaySet;
  next: DisplaySet;
  serieNumber: number;

  @ViewChild(Content)
  private readonly content: Content;

  constructor(
    navParams: NavParams,
    viewController: ViewController,
    workoutsService: WorkoutsService
  ) {
    super(
      navParams,
      viewController,
      workoutsService
    );
    this.initialize(1, null, ...this.sets.slice(0, 2));
  }

  get hasSet(): boolean {
    return !!this.current;
  }

  get isFirstSet(): boolean {
    return !this.previous;
  }

  get isLastSet(): boolean {
    return !this.next;
  }

  get isFirstSerie(): boolean {
    return !this.hasSet || this.serieNumber === 1;
  }

  get isLastSerie(): boolean {
    return !this.hasSet || this.serieNumber === this.current.series;
  }

  get isStart(): boolean {
    return this.isFirstSet && this.isFirstSerie;
  }

  get isEnd(): boolean {
    return this.isLastSet && this.isLastSerie;
  }

  get canSave(): boolean {
    return this.hasSet && this.isEnd; // TODO: when has something to save
  }

  get setNumber(): number {
    return this.getSetIndex() + 1;
  }

  get pauseable(): DisplayWorkout | DisplaySet {
    return this.isLastSerie ? this.item : this.current; // TODO: null if isEnd?
  }

  showPrevious(): void {
    this.show((previous, current, next, shift) => this.initialize(
      previous.series,
      this.getSetFrom(previous, shift),
      previous,
      current
    ), this.isStart, this.isFirstSerie, -1);
  }

  showNext(): void {
    this.show((previous, current, next, shift) => this.initialize(
      1,
      current,
      next,
      this.getSetFrom(next, shift)
    ), this.isEnd, this.isLastSerie, 1);
  }

  private get sets(): DisplaySet[] {
    return this.item.sets;
  }

  private getSetIndex(set: DisplaySet = this.current): number {
    return this.sets.indexOf(set);
  }

  private getSetFrom(
    from: DisplaySet = this.current,
    shift: number = 0
  ): DisplaySet {
    return this.sets[this.getSetIndex(from) + shift] || null;
  }

  private initialize(
    serieNumber: number,
    previous: DisplaySet = null,
    current: DisplaySet = null,
    next: DisplaySet = null
  ): void {
    this.previous = previous;
    this.current = current;
    this.next = next;
    this.serieNumber = serieNumber;
    if (this.content) { this.content.resize(); }
  }

  private show(
    initializer: Initializer,
    shouldNotDoAnything: boolean,
    shouldInitializeSet: boolean,
    shift: number
  ): void {
    if (shouldNotDoAnything) { return; }
    if (!shouldInitializeSet) { this.serieNumber += shift; }
    else { initializer(this.previous, this.current, this.next, shift); }
  }
}
