import { Component, ViewChild } from '@angular/core';

import {
  NavParams,
  ViewController,
  AlertController,
  Alert,
  Content
} from 'ionic-angular';

import { DisplayExercise } from '../../models/exercise.model';
import { DisplayWorkout } from '../../models/workout.model';
import { DisplaySet } from '../../models/set.model';
import { DisplayRecord } from '../../models/record.model';
import { NumberService } from '../../services/number.service';
import { WorkoutsService } from '../../services/workouts.service';
import { RecordsService } from '../../services/records.service';

import {
  CountdownComponent
} from '../../components/countdown/countdown.component';

import { ItemModalPage } from '../item-modal.page';

type Shifter = (set: DisplaySet) => DisplaySet;

type Initializer = (
  previous: DisplaySet,
  current: DisplaySet,
  next: DisplaySet,
  shifter: Shifter
) => void;

@Component({
  selector: 'page-exploit-workout',
  templateUrl: 'exploit-workout.page.html'
})
export class ExploitWorkoutPage
extends ItemModalPage<DisplayWorkout, WorkoutsService> { // TODO: dismiss confirmation?
  previous: DisplaySet;
  current: DisplaySet;
  next: DisplaySet;
  serieNumber: number;
  record: DisplayRecord;

  @ViewChild(Content)
  private readonly content: Content;

  @ViewChild(CountdownComponent)
  private readonly countdown: CountdownComponent;

  constructor(
    navParams: NavParams,
    viewController: ViewController,
    workoutsService: WorkoutsService,
    private readonly alertController: AlertController,
    private readonly numberService: NumberService,
    private readonly recordsService: RecordsService
  ) {
    super(
      navParams,
      viewController,
      workoutsService
    );

    this.initialize(1, null, ...this.sets.slice(0, 2));
  }

  get hasSet(): boolean {
    return !!this.current;
  }

  get isFirstSet(): boolean {
    return !this.previous;
  }

  get isLastSet(): boolean {
    return !this.next;
  }

  get isFirstSerie(): boolean {
    return !this.hasSet || this.serieNumber === 1;
  }

  get isLastSerie(): boolean {
    return !this.hasSet || this.serieNumber === this.current.series;
  }

  get isStart(): boolean {
    return this.isFirstSet && this.isFirstSerie;
  }

  get isEnd(): boolean {
    return this.isLastSet && this.isLastSerie;
  }

  get shouldRecord(): boolean {
    return this.item.record && this.hasSet;
  }

  get setNumber(): number {
    return this.getIndex() + 1;
  }

  get exercise(): DisplayExercise {
    return this.hasSet ? this.current.exercise : null;
  }

  get rest(): DisplayWorkout | DisplaySet {
    return this.isLastSerie ? this.item : this.current;
  }

  showPrevious(): void {
    this.show(-1, (previous, current, next, shifter) => this.initialize(
      previous.series,
      shifter(previous),
      previous,
      current
    ), this.isStart, this.isFirstSerie);
  }

  showNext(): void {
    this.show(+1, (previous, current, next, shifter) => this.initialize(
      1,
      current,
      next,
      shifter(next)
    ), this.isEnd, this.isLastSerie);
  }

  prompt(): void {
    if (!this.shouldRecord) { return; }
    const { item, exercise, serieNumber } = this;
    const alert: Alert = this.alertController.create({
      title: 'Repetitions?',
      inputs: [
        { name: 'value', type: 'number', placeholder: '0' }
      ],
      buttons: [
        { text: 'Cancel' },
        { text: 'Save', handler: ({ value }) => {
          this.recordsService.save(this.recordsService.create(
            item,
            exercise,
            serieNumber,
            this.numberService.parseUnsignedInt(value)
          ));
        }
      }]
    });
    alert.present();
  }

  private get sets(): DisplaySet[] {
    return this.item.sets;
  }

  private getIndex(set: DisplaySet = this.current): number {
    return this.sets.indexOf(set);
  }

  private initialize(
    serieNumber: number,
    previous: DisplaySet = null,
    current: DisplaySet = null,
    next: DisplaySet = null
  ): void {
    this.previous = previous;
    this.current = current;
    this.next = next;
    this.serieNumber = serieNumber;
    this.fetchRecord();
    if (this.content) { this.content.resize(); }
  }

  private show(
    shift: number,
    initializer: Initializer,
    shouldDismissModal: boolean,
    shouldInitializeSet: boolean
  ): void {
    if (shouldDismissModal) {
      this.dismiss();
    }
    else if (shouldInitializeSet) {
      const shifter: Shifter = set => this.sets[this.getIndex(set) + shift];
      initializer(this.previous, this.current, this.next, shifter);
    }
    else {
      this.serieNumber += shift;
      this.fetchRecord();
      if (this.countdown) { this.countdown.stop(); }
    }
  }

  private fetchRecord(): void {
    if (!this.shouldRecord) { return; }
    this.recordsService.fetch({
      workout: this.item.id,
      exercise: this.exercise.id,
      serie: this.serieNumber
    }).then(record => this.record = record);
  }
}
